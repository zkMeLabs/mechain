// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mechain/permission/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	resource "github.com/evmos/evmos/v12/types/resource"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventPutPolicy struct {
	// policy_id is an unique u256 sequence for each policy. It also be used as NFT tokenID
	PolicyId Uint `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3,customtype=Uint" json:"policy_id"`
	// principal defines the accounts/group which the permission grants to
	Principal *Principal `protobuf:"bytes,2,opt,name=principal,proto3" json:"principal,omitempty"`
	// resource_type defines the type of resource that grants permission for
	ResourceType resource.ResourceType `protobuf:"varint,3,opt,name=resource_type,json=resourceType,proto3,enum=mechain.resource.ResourceType" json:"resource_type,omitempty"`
	// resource_id defines the bucket/object/group id of the resource that grants permission for
	ResourceId Uint `protobuf:"bytes,4,opt,name=resource_id,json=resourceId,proto3,customtype=Uint" json:"resource_id"`
	// statements defines the details content of the permission, include effect/actions/sub-resources
	Statements []*Statement `protobuf:"bytes,5,rep,name=statements,proto3" json:"statements,omitempty"`
	// expiration_time defines the whole expiration time of all the statements.
	// Notices: Its priority is higher than the expiration time inside the Statement
	ExpirationTime *time.Time `protobuf:"bytes,6,opt,name=expiration_time,json=expirationTime,proto3,stdtime" json:"expiration_time,omitempty"`
}

func (m *EventPutPolicy) Reset()         { *m = EventPutPolicy{} }
func (m *EventPutPolicy) String() string { return proto.CompactTextString(m) }
func (*EventPutPolicy) ProtoMessage()    {}
func (*EventPutPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_801cf4f95472e80a, []int{0}
}
func (m *EventPutPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPutPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPutPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPutPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPutPolicy.Merge(m, src)
}
func (m *EventPutPolicy) XXX_Size() int {
	return m.Size()
}
func (m *EventPutPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPutPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_EventPutPolicy proto.InternalMessageInfo

func (m *EventPutPolicy) GetPrincipal() *Principal {
	if m != nil {
		return m.Principal
	}
	return nil
}

func (m *EventPutPolicy) GetResourceType() resource.ResourceType {
	if m != nil {
		return m.ResourceType
	}
	return resource.RESOURCE_TYPE_UNSPECIFIED
}

func (m *EventPutPolicy) GetStatements() []*Statement {
	if m != nil {
		return m.Statements
	}
	return nil
}

func (m *EventPutPolicy) GetExpirationTime() *time.Time {
	if m != nil {
		return m.ExpirationTime
	}
	return nil
}

type EventDeletePolicy struct {
	// policy_id is an unique u256 sequence for each policy. It also be used as NFT tokenID
	PolicyId Uint `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3,customtype=Uint" json:"policy_id"`
}

func (m *EventDeletePolicy) Reset()         { *m = EventDeletePolicy{} }
func (m *EventDeletePolicy) String() string { return proto.CompactTextString(m) }
func (*EventDeletePolicy) ProtoMessage()    {}
func (*EventDeletePolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_801cf4f95472e80a, []int{1}
}
func (m *EventDeletePolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDeletePolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDeletePolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDeletePolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDeletePolicy.Merge(m, src)
}
func (m *EventDeletePolicy) XXX_Size() int {
	return m.Size()
}
func (m *EventDeletePolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDeletePolicy.DiscardUnknown(m)
}

var xxx_messageInfo_EventDeletePolicy proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EventPutPolicy)(nil), "mechain.permission.EventPutPolicy")
	proto.RegisterType((*EventDeletePolicy)(nil), "mechain.permission.EventDeletePolicy")
}

func init() { proto.RegisterFile("mechain/permission/events.proto", fileDescriptor_801cf4f95472e80a) }

var fileDescriptor_801cf4f95472e80a = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x3f, 0x6f, 0x13, 0x31,
	0x18, 0xc6, 0x63, 0x52, 0xaa, 0xc6, 0x81, 0x20, 0x2c, 0x86, 0x23, 0x80, 0x2f, 0xea, 0x94, 0xa5,
	0x3e, 0x11, 0x16, 0x24, 0x60, 0x09, 0x20, 0xd4, 0xa1, 0x52, 0x74, 0x94, 0x85, 0x25, 0xba, 0x5c,
	0x5e, 0xae, 0x96, 0xe2, 0x7b, 0xad, 0xb3, 0x2f, 0x6a, 0xbe, 0x45, 0x47, 0x3e, 0x08, 0x1f, 0x22,
	0x63, 0xc5, 0x84, 0x18, 0x02, 0x4a, 0xbe, 0x08, 0xba, 0x3f, 0x6e, 0x22, 0x35, 0x88, 0x81, 0xe5,
	0xf4, 0xbe, 0x7e, 0x7f, 0xf6, 0x3d, 0x8f, 0x1f, 0x53, 0x5f, 0x41, 0x7c, 0x11, 0xc9, 0x34, 0xd0,
	0x90, 0x29, 0x69, 0x8c, 0xc4, 0x34, 0x80, 0x39, 0xa4, 0xd6, 0x08, 0x9d, 0xa1, 0x45, 0xc6, 0x6a,
	0x40, 0x6c, 0x81, 0xee, 0xe3, 0x18, 0x8d, 0x42, 0x33, 0x2e, 0x89, 0xa0, 0x6a, 0x2a, 0xbc, 0xfb,
	0x28, 0xc1, 0x04, 0xab, 0xf5, 0xa2, 0xaa, 0x57, 0xfd, 0x04, 0x31, 0x99, 0x41, 0x50, 0x76, 0x93,
	0xfc, 0x4b, 0x60, 0xa5, 0x02, 0x63, 0x23, 0xa5, 0x1d, 0xb0, 0x47, 0x46, 0x8c, 0x4a, 0x61, 0x5a,
	0x03, 0x7c, 0x0f, 0x60, 0x17, 0x1a, 0xdc, 0x7f, 0x9f, 0xba, 0x79, 0x06, 0x06, 0xf3, 0x2c, 0x86,
	0xdd, 0xe9, 0xf1, 0xd7, 0x26, 0xed, 0xbc, 0x2f, 0x5c, 0x8d, 0x72, 0x3b, 0xc2, 0x99, 0x8c, 0x17,
	0xec, 0x25, 0x6d, 0xe9, 0xb2, 0x1a, 0xcb, 0xa9, 0x47, 0x7a, 0xa4, 0xdf, 0x1a, 0x3e, 0x59, 0xae,
	0xfc, 0xc6, 0xcf, 0x95, 0x7f, 0xf0, 0x49, 0xa6, 0xf6, 0xfb, 0xb7, 0x93, 0x76, 0xed, 0xac, 0x68,
	0xc3, 0xa3, 0x8a, 0x3e, 0x9d, 0xb2, 0x57, 0xb4, 0xa5, 0x33, 0x99, 0xc6, 0x52, 0x47, 0x33, 0xef,
	0x4e, 0x8f, 0xf4, 0xdb, 0x83, 0x67, 0xe2, 0xf6, 0x2d, 0x89, 0x91, 0x83, 0xc2, 0x2d, 0xcf, 0xde,
	0xd2, 0xfb, 0x4e, 0xe1, 0xb8, 0x50, 0xe8, 0x35, 0x7b, 0xa4, 0xdf, 0x19, 0xf0, 0x9b, 0x03, 0xdc,
	0x54, 0x84, 0x75, 0x71, 0xbe, 0xd0, 0x10, 0xde, 0xcb, 0x76, 0x3a, 0xf6, 0x9a, 0xb6, 0x6f, 0x0e,
	0x91, 0x53, 0xef, 0xe0, 0xdf, 0xea, 0xa9, 0xe3, 0x4f, 0xa7, 0xec, 0x0d, 0xa5, 0xc6, 0x46, 0x16,
	0x54, 0x91, 0xb2, 0x77, 0xb7, 0xd7, 0xfc, 0x9b, 0x81, 0x8f, 0x8e, 0x0a, 0x77, 0x36, 0xb0, 0x33,
	0xfa, 0x00, 0x2e, 0xb5, 0xcc, 0x22, 0x2b, 0x31, 0x1d, 0x17, 0x41, 0x7a, 0x87, 0xe5, 0x25, 0x74,
	0x45, 0x95, 0xb2, 0x70, 0x29, 0x8b, 0x73, 0x97, 0xf2, 0xf0, 0x68, 0xb9, 0xf2, 0xc9, 0xd5, 0x2f,
	0x9f, 0x84, 0x9d, 0xed, 0xe6, 0x62, 0x7c, 0x7c, 0x46, 0x1f, 0x96, 0xc9, 0xbc, 0x83, 0x19, 0x58,
	0xf8, 0xdf, 0x70, 0x86, 0x1f, 0x96, 0x6b, 0x4e, 0xae, 0xd7, 0x9c, 0xfc, 0x5e, 0x73, 0x72, 0xb5,
	0xe1, 0x8d, 0xeb, 0x0d, 0x6f, 0xfc, 0xd8, 0xf0, 0xc6, 0xe7, 0x93, 0x44, 0xda, 0x8b, 0x7c, 0x22,
	0x62, 0x54, 0x01, 0xcc, 0x15, 0x9a, 0xfa, 0x3b, 0x7f, 0x3e, 0x08, 0x2e, 0x6f, 0x3d, 0xab, 0xc9,
	0x61, 0xe9, 0xe2, 0xc5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x0b, 0x31, 0x3f, 0x21, 0x03,
	0x00, 0x00,
}

func (m *EventPutPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPutPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPutPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationTime != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ExpirationTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ExpirationTime):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintEvents(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Statements) > 0 {
		for iNdEx := len(m.Statements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Statements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.ResourceId.Size()
		i -= size
		if _, err := m.ResourceId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.ResourceType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ResourceType))
		i--
		dAtA[i] = 0x18
	}
	if m.Principal != nil {
		{
			size, err := m.Principal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.PolicyId.Size()
		i -= size
		if _, err := m.PolicyId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventDeletePolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDeletePolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDeletePolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PolicyId.Size()
		i -= size
		if _, err := m.PolicyId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventPutPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PolicyId.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.Principal != nil {
		l = m.Principal.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ResourceType != 0 {
		n += 1 + sovEvents(uint64(m.ResourceType))
	}
	l = m.ResourceId.Size()
	n += 1 + l + sovEvents(uint64(l))
	if len(m.Statements) > 0 {
		for _, e := range m.Statements {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if m.ExpirationTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ExpirationTime)
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventDeletePolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PolicyId.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventPutPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPutPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPutPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PolicyId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Principal == nil {
				m.Principal = &Principal{}
			}
			if err := m.Principal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			m.ResourceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceType |= resource.ResourceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResourceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statements = append(m.Statements, &Statement{})
			if err := m.Statements[len(m.Statements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpirationTime == nil {
				m.ExpirationTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ExpirationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDeletePolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDeletePolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDeletePolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PolicyId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
