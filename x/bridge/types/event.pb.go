// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mechain/bridge/event.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RefundReason int32

const (
	REFUND_REASON_UNKNOWN              RefundReason = 0
	REFUND_REASON_INSUFFICIENT_BALANCE RefundReason = 1
	REFUND_REASON_FAIL_ACK             RefundReason = 2
)

var RefundReason_name = map[int32]string{
	0: "REFUND_REASON_UNKNOWN",
	1: "REFUND_REASON_INSUFFICIENT_BALANCE",
	2: "REFUND_REASON_FAIL_ACK",
}

var RefundReason_value = map[string]int32{
	"REFUND_REASON_UNKNOWN":              0,
	"REFUND_REASON_INSUFFICIENT_BALANCE": 1,
	"REFUND_REASON_FAIL_ACK":             2,
}

func (x RefundReason) String() string {
	return proto.EnumName(RefundReason_name, int32(x))
}

func (RefundReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_022979666dd0e1e5, []int{0}
}

// EventCrossTransferOut is emitted when a cross chain transfer out tx created
type EventCrossTransferOut struct {
	// From addres of the cross chain transfer tx
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// To addres of the cross chain transfer tx
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// Amount of the cross chain transfer tx
	Amount *types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// Relayer fee of the cross chain transfer tx
	RelayerFee *types.Coin `protobuf:"bytes,4,opt,name=relayer_fee,json=relayerFee,proto3" json:"relayer_fee,omitempty"`
	// Sequence of the corresponding cross chain package
	Sequence uint64 `protobuf:"varint,5,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Destination chain id of the cross chain transfer tx
	DestChainId uint32 `protobuf:"varint,6,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
}

func (m *EventCrossTransferOut) Reset()         { *m = EventCrossTransferOut{} }
func (m *EventCrossTransferOut) String() string { return proto.CompactTextString(m) }
func (*EventCrossTransferOut) ProtoMessage()    {}
func (*EventCrossTransferOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_022979666dd0e1e5, []int{0}
}
func (m *EventCrossTransferOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrossTransferOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrossTransferOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrossTransferOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrossTransferOut.Merge(m, src)
}
func (m *EventCrossTransferOut) XXX_Size() int {
	return m.Size()
}
func (m *EventCrossTransferOut) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrossTransferOut.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrossTransferOut proto.InternalMessageInfo

func (m *EventCrossTransferOut) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *EventCrossTransferOut) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *EventCrossTransferOut) GetAmount() *types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *EventCrossTransferOut) GetRelayerFee() *types.Coin {
	if m != nil {
		return m.RelayerFee
	}
	return nil
}

func (m *EventCrossTransferOut) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *EventCrossTransferOut) GetDestChainId() uint32 {
	if m != nil {
		return m.DestChainId
	}
	return 0
}

// EventCrossTransferOutRefund is emitted when a cross chain transfer out tx failed
type EventCrossTransferOutRefund struct {
	// Refund address of the failed cross chain transfer tx
	RefundAddress string `protobuf:"bytes,1,opt,name=refund_address,json=refundAddress,proto3" json:"refund_address,omitempty"`
	// Amount of the failed cross chain transfer tx
	Amount *types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Refund reason of the failed cross chain transfer tx
	RefundReason RefundReason `protobuf:"varint,3,opt,name=refund_reason,json=refundReason,proto3,enum=mechain.bridge.RefundReason" json:"refund_reason,omitempty"`
	// Sequence of the corresponding cross chain package
	Sequence uint64 `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Destination chain id of the cross chain transfer tx
	DestChainId uint32 `protobuf:"varint,5,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
}

func (m *EventCrossTransferOutRefund) Reset()         { *m = EventCrossTransferOutRefund{} }
func (m *EventCrossTransferOutRefund) String() string { return proto.CompactTextString(m) }
func (*EventCrossTransferOutRefund) ProtoMessage()    {}
func (*EventCrossTransferOutRefund) Descriptor() ([]byte, []int) {
	return fileDescriptor_022979666dd0e1e5, []int{1}
}
func (m *EventCrossTransferOutRefund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrossTransferOutRefund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrossTransferOutRefund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrossTransferOutRefund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrossTransferOutRefund.Merge(m, src)
}
func (m *EventCrossTransferOutRefund) XXX_Size() int {
	return m.Size()
}
func (m *EventCrossTransferOutRefund) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrossTransferOutRefund.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrossTransferOutRefund proto.InternalMessageInfo

func (m *EventCrossTransferOutRefund) GetRefundAddress() string {
	if m != nil {
		return m.RefundAddress
	}
	return ""
}

func (m *EventCrossTransferOutRefund) GetAmount() *types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *EventCrossTransferOutRefund) GetRefundReason() RefundReason {
	if m != nil {
		return m.RefundReason
	}
	return REFUND_REASON_UNKNOWN
}

func (m *EventCrossTransferOutRefund) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *EventCrossTransferOutRefund) GetDestChainId() uint32 {
	if m != nil {
		return m.DestChainId
	}
	return 0
}

// EventCrossTransferIn is emitted when a cross chain transfer in tx happened
type EventCrossTransferIn struct {
	// Amount of the cross chain transfer tx
	Amount *types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Receiver of the cross chain transfer tx
	ReceiverAddress string `protobuf:"bytes,2,opt,name=receiver_address,json=receiverAddress,proto3" json:"receiver_address,omitempty"`
	// Refund of the cross chain transfer tx in BSC
	RefundAddress string `protobuf:"bytes,3,opt,name=refund_address,json=refundAddress,proto3" json:"refund_address,omitempty"`
	// Sequence of the corresponding cross chain package
	Sequence uint64 `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Source chain id of the cross chain transfer tx
	SrcChainId uint32 `protobuf:"varint,5,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
}

func (m *EventCrossTransferIn) Reset()         { *m = EventCrossTransferIn{} }
func (m *EventCrossTransferIn) String() string { return proto.CompactTextString(m) }
func (*EventCrossTransferIn) ProtoMessage()    {}
func (*EventCrossTransferIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_022979666dd0e1e5, []int{2}
}
func (m *EventCrossTransferIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrossTransferIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrossTransferIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrossTransferIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrossTransferIn.Merge(m, src)
}
func (m *EventCrossTransferIn) XXX_Size() int {
	return m.Size()
}
func (m *EventCrossTransferIn) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrossTransferIn.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrossTransferIn proto.InternalMessageInfo

func (m *EventCrossTransferIn) GetAmount() *types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *EventCrossTransferIn) GetReceiverAddress() string {
	if m != nil {
		return m.ReceiverAddress
	}
	return ""
}

func (m *EventCrossTransferIn) GetRefundAddress() string {
	if m != nil {
		return m.RefundAddress
	}
	return ""
}

func (m *EventCrossTransferIn) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *EventCrossTransferIn) GetSrcChainId() uint32 {
	if m != nil {
		return m.SrcChainId
	}
	return 0
}

func init() {
	proto.RegisterEnum("mechain.bridge.RefundReason", RefundReason_name, RefundReason_value)
	proto.RegisterType((*EventCrossTransferOut)(nil), "mechain.bridge.EventCrossTransferOut")
	proto.RegisterType((*EventCrossTransferOutRefund)(nil), "mechain.bridge.EventCrossTransferOutRefund")
	proto.RegisterType((*EventCrossTransferIn)(nil), "mechain.bridge.EventCrossTransferIn")
}

func init() { proto.RegisterFile("mechain/bridge/event.proto", fileDescriptor_022979666dd0e1e5) }

var fileDescriptor_022979666dd0e1e5 = []byte{
	// 524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6a, 0xdb, 0x40,
	0x10, 0xc6, 0xbd, 0x8e, 0x63, 0xda, 0xf1, 0x9f, 0x9a, 0x25, 0x29, 0x8a, 0x5a, 0x84, 0x31, 0xb4,
	0x38, 0x3d, 0x48, 0xd8, 0xbd, 0xf5, 0xa6, 0xa8, 0x36, 0x88, 0x04, 0x19, 0x94, 0x98, 0x42, 0x2f,
	0x42, 0x96, 0xc6, 0x8e, 0xa0, 0xd6, 0xa6, 0xbb, 0x6b, 0xd1, 0xbc, 0x41, 0x8f, 0x7d, 0x87, 0xbe,
	0x4c, 0x8f, 0x39, 0xb6, 0xb7, 0x62, 0xdf, 0xfa, 0x08, 0x3d, 0x15, 0xfd, 0x71, 0xb0, 0xeb, 0x90,
	0xe4, 0x22, 0x66, 0xbf, 0xf9, 0xb4, 0xcc, 0xef, 0x93, 0x06, 0xd4, 0x39, 0x06, 0x97, 0x7e, 0x14,
	0x1b, 0x13, 0x1e, 0x85, 0x33, 0x34, 0x30, 0xc1, 0x58, 0xea, 0x57, 0x9c, 0x49, 0x46, 0x9b, 0x45,
	0x4f, 0xcf, 0x7b, 0xaa, 0x16, 0x30, 0x31, 0x67, 0xc2, 0x98, 0xf8, 0x02, 0x8d, 0xa4, 0x37, 0x41,
	0xe9, 0xf7, 0x8c, 0x80, 0x45, 0x71, 0xee, 0x57, 0x0f, 0x66, 0x6c, 0xc6, 0xb2, 0xd2, 0x48, 0xab,
	0x5c, 0xed, 0xfc, 0x21, 0x70, 0x38, 0x48, 0x6f, 0xb5, 0x38, 0x13, 0xe2, 0x82, 0xfb, 0xb1, 0x98,
	0x22, 0x1f, 0x2d, 0x24, 0xa5, 0x50, 0x99, 0x72, 0x36, 0x57, 0x48, 0x9b, 0x74, 0x9f, 0xba, 0x59,
	0x4d, 0x9b, 0x50, 0x96, 0x4c, 0x29, 0x67, 0x4a, 0x59, 0x32, 0xda, 0x83, 0xaa, 0x3f, 0x67, 0x8b,
	0x58, 0x2a, 0x7b, 0x6d, 0xd2, 0xad, 0xf5, 0x8f, 0xf4, 0x7c, 0x08, 0x3d, 0x1d, 0x42, 0x2f, 0x86,
	0xd0, 0x2d, 0x16, 0xc5, 0x6e, 0x61, 0xa4, 0xef, 0xa0, 0xc6, 0xf1, 0x93, 0x7f, 0x8d, 0xdc, 0x9b,
	0x22, 0x2a, 0x95, 0x87, 0xde, 0x83, 0xc2, 0x3d, 0x44, 0xa4, 0x2a, 0x3c, 0x11, 0xf8, 0x79, 0x81,
	0x71, 0x80, 0xca, 0x7e, 0x9b, 0x74, 0x2b, 0xee, 0xed, 0x99, 0x76, 0xa0, 0x11, 0xa2, 0x90, 0x5e,
	0x96, 0x89, 0x17, 0x85, 0x4a, 0xb5, 0x4d, 0xba, 0x0d, 0xb7, 0x96, 0x8a, 0x56, 0xaa, 0xd9, 0x61,
	0xe7, 0x2f, 0x81, 0x17, 0x77, 0xc2, 0xba, 0x38, 0x5d, 0xc4, 0x21, 0x7d, 0x05, 0x4d, 0x9e, 0x55,
	0x9e, 0x1f, 0x86, 0x1c, 0x85, 0x28, 0xe0, 0x1b, 0xb9, 0x6a, 0xe6, 0xe2, 0x06, 0x75, 0xf9, 0xb1,
	0xd4, 0x26, 0x14, 0x77, 0x78, 0x1c, 0x7d, 0xc1, 0xe2, 0x2c, 0xaf, 0x66, 0xff, 0xa5, 0xbe, 0xfd,
	0x11, 0xf5, 0x7c, 0x10, 0x37, 0xf3, 0xb8, 0x75, 0xbe, 0x71, 0xda, 0x82, 0xaf, 0x3c, 0x04, 0xbf,
	0xbf, 0x0b, 0xff, 0x8b, 0xc0, 0xc1, 0x2e, 0xbc, 0x1d, 0x6f, 0xe0, 0x90, 0xc7, 0xe2, 0x1c, 0x43,
	0x8b, 0x63, 0x80, 0x51, 0x82, 0xfc, 0x36, 0xaa, 0xfc, 0xaf, 0x78, 0xb6, 0xd6, 0xd7, 0x61, 0xed,
	0x66, 0xba, 0x77, 0x57, 0xa6, 0xf7, 0xd1, 0xb5, 0xa1, 0x2e, 0x78, 0xf0, 0x3f, 0x1c, 0x08, 0x1e,
	0x14, 0x6c, 0x6f, 0x04, 0xd4, 0x37, 0x93, 0xa3, 0x47, 0x70, 0xe8, 0x0e, 0x86, 0x63, 0xe7, 0xbd,
	0xe7, 0x0e, 0xcc, 0xf3, 0x91, 0xe3, 0x8d, 0x9d, 0x53, 0x67, 0xf4, 0xc1, 0x69, 0x95, 0xe8, 0x6b,
	0xe8, 0x6c, 0xb7, 0x6c, 0xe7, 0x7c, 0x3c, 0x1c, 0xda, 0x96, 0x3d, 0x70, 0x2e, 0xbc, 0x13, 0xf3,
	0xcc, 0x74, 0xac, 0x41, 0x8b, 0x50, 0x15, 0x9e, 0x6f, 0xfb, 0x86, 0xa6, 0x7d, 0xe6, 0x99, 0xd6,
	0x69, 0xab, 0xac, 0x56, 0xbe, 0x7e, 0xd7, 0x4a, 0x27, 0xd6, 0x8f, 0xa5, 0x46, 0x6e, 0x96, 0x1a,
	0xf9, 0xbd, 0xd4, 0xc8, 0xb7, 0x95, 0x56, 0xba, 0x59, 0x69, 0xa5, 0x9f, 0x2b, 0xad, 0xf4, 0xf1,
	0x78, 0x16, 0xc9, 0xcb, 0xc5, 0x44, 0x0f, 0xd8, 0xdc, 0xc0, 0x24, 0x5d, 0xca, 0xfc, 0x99, 0xf4,
	0xfa, 0xc6, 0x97, 0xf5, 0x2e, 0xcb, 0xeb, 0x2b, 0x14, 0x93, 0x6a, 0xb6, 0x86, 0x6f, 0xff, 0x05,
	0x00, 0x00, 0xff, 0xff, 0xc6, 0xfb, 0xfa, 0xad, 0xea, 0x03, 0x00, 0x00,
}

func (m *EventCrossTransferOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrossTransferOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrossTransferOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DestChainId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.DestChainId))
		i--
		dAtA[i] = 0x30
	}
	if m.Sequence != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x28
	}
	if m.RelayerFee != nil {
		{
			size, err := m.RelayerFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrossTransferOutRefund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrossTransferOutRefund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrossTransferOutRefund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DestChainId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.DestChainId))
		i--
		dAtA[i] = 0x28
	}
	if m.Sequence != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x20
	}
	if m.RefundReason != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.RefundReason))
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RefundAddress) > 0 {
		i -= len(m.RefundAddress)
		copy(dAtA[i:], m.RefundAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RefundAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrossTransferIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrossTransferIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrossTransferIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SrcChainId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SrcChainId))
		i--
		dAtA[i] = 0x28
	}
	if m.Sequence != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RefundAddress) > 0 {
		i -= len(m.RefundAddress)
		copy(dAtA[i:], m.RefundAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RefundAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ReceiverAddress) > 0 {
		i -= len(m.ReceiverAddress)
		copy(dAtA[i:], m.ReceiverAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ReceiverAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventCrossTransferOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.RelayerFee != nil {
		l = m.RelayerFee.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovEvent(uint64(m.Sequence))
	}
	if m.DestChainId != 0 {
		n += 1 + sovEvent(uint64(m.DestChainId))
	}
	return n
}

func (m *EventCrossTransferOutRefund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RefundAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.RefundReason != 0 {
		n += 1 + sovEvent(uint64(m.RefundReason))
	}
	if m.Sequence != 0 {
		n += 1 + sovEvent(uint64(m.Sequence))
	}
	if m.DestChainId != 0 {
		n += 1 + sovEvent(uint64(m.DestChainId))
	}
	return n
}

func (m *EventCrossTransferIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ReceiverAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.RefundAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovEvent(uint64(m.Sequence))
	}
	if m.SrcChainId != 0 {
		n += 1 + sovEvent(uint64(m.SrcChainId))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventCrossTransferOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrossTransferOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrossTransferOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelayerFee == nil {
				m.RelayerFee = &types.Coin{}
			}
			if err := m.RelayerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			m.DestChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrossTransferOutRefund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrossTransferOutRefund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrossTransferOutRefund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundReason", wireType)
			}
			m.RefundReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefundReason |= RefundReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			m.DestChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrossTransferIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrossTransferIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrossTransferIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			m.SrcChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
