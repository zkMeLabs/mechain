// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greenfield/virtualgroup/common.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PickVGFStrategy represents the method for selecting the best global virtual group family based on the strategy
type PickVGFStrategy int32

const (
	Strategy_Maximize_Free_Store_Size PickVGFStrategy = 0
	Strategy_Minimal_Free_Store_Size  PickVGFStrategy = 1
	Strategy_Oldest_Create_Time       PickVGFStrategy = 2
	Strategy_Recentest_Create_Time    PickVGFStrategy = 3
)

var PickVGFStrategy_name = map[int32]string{
	0: "Strategy_Maximize_Free_Store_Size",
	1: "Strategy_Minimal_Free_Store_Size",
	2: "Strategy_Oldest_Create_Time",
	3: "Strategy_Recentest_Create_Time",
}

var PickVGFStrategy_value = map[string]int32{
	"Strategy_Maximize_Free_Store_Size": 0,
	"Strategy_Minimal_Free_Store_Size":  1,
	"Strategy_Oldest_Create_Time":       2,
	"Strategy_Recentest_Create_Time":    3,
}

func (x PickVGFStrategy) String() string {
	return proto.EnumName(PickVGFStrategy_name, int32(x))
}

func (PickVGFStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_95d96763aeb17687, []int{0}
}

func init() {
	proto.RegisterEnum("greenfield.virtualgroup.PickVGFStrategy", PickVGFStrategy_name, PickVGFStrategy_value)
}

func init() {
	proto.RegisterFile("greenfield/virtualgroup/common.proto", fileDescriptor_95d96763aeb17687)
}

var fileDescriptor_95d96763aeb17687 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0xd0, 0x3d, 0x4a, 0x03, 0x41,
	0x14, 0xc0, 0xf1, 0x5d, 0x15, 0x8b, 0x69, 0x0c, 0x8b, 0x20, 0x44, 0x18, 0x3f, 0x88, 0x8d, 0xe0,
	0x4e, 0xa1, 0x27, 0x50, 0x88, 0x95, 0x1f, 0xb8, 0x62, 0x61, 0x33, 0xcc, 0x4e, 0x9e, 0x93, 0x87,
	0x3b, 0x33, 0xcb, 0xe4, 0xad, 0x24, 0x39, 0x81, 0xa5, 0x77, 0xb0, 0xf2, 0x26, 0x96, 0x29, 0x2d,
	0x65, 0xf7, 0x22, 0x62, 0xc4, 0x24, 0x9a, 0xee, 0x5f, 0xfc, 0xaa, 0x3f, 0xeb, 0x98, 0x00, 0xe0,
	0x1e, 0x10, 0x8a, 0x9e, 0x78, 0xc2, 0x40, 0x95, 0x2a, 0x4c, 0xf0, 0x55, 0x29, 0xb4, 0xb7, 0xd6,
	0xbb, 0xb4, 0x0c, 0x9e, 0x7c, 0xb2, 0x35, 0x57, 0xe9, 0xa2, 0x6a, 0x6f, 0x1a, 0x6f, 0xfc, 0xd4,
	0x88, 0xef, 0xfa, 0xe1, 0x87, 0x6f, 0x31, 0xdb, 0xb8, 0x46, 0xfd, 0x78, 0x77, 0xde, 0xcd, 0x28,
	0x28, 0x02, 0x33, 0x4a, 0x0e, 0xd8, 0xde, 0x6f, 0xcb, 0x0b, 0x35, 0x44, 0x8b, 0x63, 0x90, 0xdd,
	0x00, 0x20, 0x33, 0xf2, 0x01, 0x64, 0x86, 0x63, 0x68, 0x45, 0x49, 0x87, 0xed, 0xce, 0x19, 0x3a,
	0xb4, 0xaa, 0x58, 0x52, 0x71, 0xb2, 0xc3, 0xb6, 0x67, 0xea, 0xaa, 0xe8, 0xc1, 0x80, 0xe4, 0x59,
	0x00, 0x45, 0x20, 0x6f, 0xd1, 0x42, 0x6b, 0x25, 0xd9, 0x67, 0x7c, 0x06, 0x6e, 0x40, 0x83, 0xa3,
	0xff, 0x66, 0xb5, 0xbd, 0xf6, 0xfc, 0xca, 0xa3, 0xd3, 0xcb, 0xf7, 0x9a, 0xc7, 0x93, 0x9a, 0xc7,
	0x9f, 0x35, 0x8f, 0x5f, 0x1a, 0x1e, 0x4d, 0x1a, 0x1e, 0x7d, 0x34, 0x3c, 0xba, 0x3f, 0x31, 0x48,
	0xfd, 0x2a, 0x4f, 0xb5, 0xb7, 0x22, 0x77, 0xf9, 0x91, 0xee, 0x2b, 0x74, 0x62, 0xe1, 0xd7, 0xf0,
	0xef, 0x31, 0x1a, 0x95, 0x30, 0xc8, 0xd7, 0xa7, 0x0b, 0x8e, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xb5, 0xa5, 0xf9, 0x65, 0x59, 0x01, 0x00, 0x00,
}
