// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greenfield/sp/authz.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DepositAuthorization defines authorization for sp deposit.
type DepositAuthorization struct {
	// max_deposit specifies the maximum amount of tokens can be deposit to a storage provider. If it is
	// empty, there is no spend limit and any amount of coins can be deposit.
	MaxDeposit *types.Coin `protobuf:"bytes,1,opt,name=max_deposit,json=maxDeposit,proto3" json:"max_deposit,omitempty"`
	// sp_address is the operator address of storage provider.
	SpAddress string `protobuf:"bytes,2,opt,name=sp_address,json=spAddress,proto3" json:"sp_address,omitempty"`
}

func (m *DepositAuthorization) Reset()         { *m = DepositAuthorization{} }
func (m *DepositAuthorization) String() string { return proto.CompactTextString(m) }
func (*DepositAuthorization) ProtoMessage()    {}
func (*DepositAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_eab7bba09f125b26, []int{0}
}
func (m *DepositAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositAuthorization.Merge(m, src)
}
func (m *DepositAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *DepositAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_DepositAuthorization proto.InternalMessageInfo

func (m *DepositAuthorization) GetMaxDeposit() *types.Coin {
	if m != nil {
		return m.MaxDeposit
	}
	return nil
}

func (m *DepositAuthorization) GetSpAddress() string {
	if m != nil {
		return m.SpAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*DepositAuthorization)(nil), "greenfield.sp.DepositAuthorization")
}

func init() { proto.RegisterFile("greenfield/sp/authz.proto", fileDescriptor_eab7bba09f125b26) }

var fileDescriptor_eab7bba09f125b26 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0x6b, 0x06, 0xa4, 0xba, 0x62, 0xa9, 0x3a, 0x24, 0x1d, 0xac, 0x0a, 0x09, 0xa9, 0x0b,
	0xb6, 0x52, 0x06, 0x24, 0x16, 0xd4, 0xc2, 0x09, 0xca, 0xc6, 0x12, 0x39, 0x89, 0x49, 0x2c, 0x91,
	0x3c, 0x2b, 0xcf, 0x89, 0x42, 0xaf, 0xc0, 0xc2, 0x61, 0x38, 0x04, 0x63, 0xc5, 0xc4, 0x88, 0x92,
	0x8b, 0xa0, 0xd4, 0x96, 0x58, 0x2c, 0xbf, 0xff, 0xb3, 0xff, 0x5f, 0xef, 0xa7, 0x61, 0x5e, 0x2b,
	0x55, 0xbd, 0x68, 0xf5, 0x9a, 0x09, 0x34, 0x42, 0x36, 0xb6, 0x38, 0x70, 0x53, 0x83, 0x85, 0xf9,
	0xc5, 0x3f, 0xe2, 0x68, 0x96, 0x2c, 0x05, 0x2c, 0x01, 0x45, 0x22, 0x51, 0x89, 0x36, 0x4a, 0x94,
	0x95, 0x91, 0x48, 0x41, 0x57, 0xee, 0xf9, 0x32, 0x74, 0x3c, 0x3e, 0x4d, 0xc2, 0x0d, 0x1e, 0x2d,
	0x72, 0xc8, 0xc1, 0xe9, 0xe3, 0xcd, 0xa9, 0x97, 0xef, 0x84, 0x2e, 0x1e, 0x95, 0x01, 0xd4, 0x76,
	0xdb, 0xd8, 0x02, 0x6a, 0x7d, 0x90, 0x56, 0x43, 0x35, 0xbf, 0xa3, 0xb3, 0x52, 0x76, 0x71, 0xe6,
	0x58, 0x40, 0x56, 0x64, 0x3d, 0xdb, 0x84, 0xdc, 0x5b, 0x8e, 0xf9, 0xdc, 0xe7, 0xf3, 0x07, 0xd0,
	0xd5, 0x9e, 0x96, 0xb2, 0xf3, 0x46, 0xf3, 0x5b, 0x4a, 0xd1, 0xc4, 0x32, 0xcb, 0x6a, 0x85, 0x18,
	0x9c, 0xad, 0xc8, 0x7a, 0xba, 0x0b, 0xbe, 0x3f, 0xaf, 0x17, 0xfe, 0xf7, 0xd6, 0x91, 0x27, 0x5b,
	0xeb, 0x2a, 0xdf, 0x4f, 0xd1, 0x78, 0x61, 0x77, 0xff, 0xd5, 0x33, 0x72, 0xec, 0x19, 0xf9, 0xed,
	0x19, 0xf9, 0x18, 0xd8, 0xe4, 0x38, 0xb0, 0xc9, 0xcf, 0xc0, 0x26, 0xcf, 0x57, 0xb9, 0xb6, 0x45,
	0x93, 0xf0, 0x14, 0x4a, 0xa1, 0xda, 0xb1, 0x02, 0x77, 0xb6, 0xd1, 0x46, 0x74, 0x63, 0x69, 0xf6,
	0xcd, 0x28, 0x4c, 0xce, 0x4f, 0x5b, 0xdd, 0xfc, 0x05, 0x00, 0x00, 0xff, 0xff, 0x72, 0x3d, 0x81,
	0x5b, 0x52, 0x01, 0x00, 0x00,
}

func (m *DepositAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpAddress) > 0 {
		i -= len(m.SpAddress)
		copy(dAtA[i:], m.SpAddress)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.SpAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.MaxDeposit != nil {
		{
			size, err := m.MaxDeposit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuthz(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuthz(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DepositAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxDeposit != nil {
		l = m.MaxDeposit.Size()
		n += 1 + l + sovAuthz(uint64(l))
	}
	l = len(m.SpAddress)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	return n
}

func sovAuthz(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuthz(x uint64) (n int) {
	return sovAuthz(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DepositAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxDeposit == nil {
				m.MaxDeposit = &types.Coin{}
			}
			if err := m.MaxDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthz(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuthz
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuthz
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuthz
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuthz        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthz          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuthz = fmt.Errorf("proto: unexpected end of group")
)
